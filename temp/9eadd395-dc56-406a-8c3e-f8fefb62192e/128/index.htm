<!DOCTYPE HTML><html><head>
<meta http-equiv="Content-Type" content="text/html; charset=unicode">
<title>Git和Github简单教程</title>
    <!--mark |wiz_custom_css| for wizeditor replace it-->
<style id="wiz_code_style">.wiz-code-container{position: relative; padding:13px 0; margin: 5px 25px 5px 5px;}.CodeMirror {font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace; color: black; font-size: 10pt; font-size: 0.83rem}.CodeMirror-lines {padding: 4px 0;}.CodeMirror pre {padding: 0 4px;}.CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {background-color: white;}.CodeMirror-gutters {border-right: 1px solid #ddd; background-color: #f7f7f7; white-space: nowrap;}.CodeMirror-linenumbers {}.CodeMirror-linenumber {padding: 0 3px 0 5px; min-width: 20px; text-align: right; color: #999; white-space: nowrap;}.CodeMirror-guttermarker {color: black;}.CodeMirror-guttermarker-subtle {color: #999;}.CodeMirror-cursor {border-left: 1px solid black; border-right: none; width: 0;}.CodeMirror div.CodeMirror-secondarycursor {border-left: 1px solid silver;}.cm-fat-cursor .CodeMirror-cursor {width: auto; border: 0 !important; background: #7e7;}.cm-fat-cursor div.CodeMirror-cursors {z-index: 1;}.cm-animate-fat-cursor {width: auto; border: 0; -webkit-animation: blink 1.06s steps(1) infinite; -moz-animation: blink 1.06s steps(1) infinite; animation: blink 1.06s steps(1) infinite; background-color: #7e7;}@-moz-keyframes blink {  0% {}  50% { background-color: transparent; }  100% {}}@-webkit-keyframes blink {  0% {}  50% { background-color: transparent; }  100% {}}@keyframes blink {  0% {}  50% { background-color: transparent; }  100% {}}.CodeMirror-overwrite .CodeMirror-cursor {}.cm-tab { display: inline-block; text-decoration: inherit; }.CodeMirror-rulers {position: absolute; left: 0; right: 0; top: -50px; bottom: -20px; overflow: hidden;}.CodeMirror-ruler {border-left: 1px solid #ccc; top: 0; bottom: 0; position: absolute;}.cm-s-default .cm-header {color: blue;}.cm-s-default .cm-quote {color: #090;}.cm-negative {color: #d44;}.cm-positive {color: #292;}.cm-header, .cm-strong {font-weight: bold;}.cm-em {font-style: italic;}.cm-link {text-decoration: underline;}.cm-strikethrough {text-decoration: line-through;}.cm-s-default .cm-keyword {color: #708;}.cm-s-default .cm-atom {color: #219;}.cm-s-default .cm-number {color: #164;}.cm-s-default .cm-def {color: #00f;}.cm-s-default .cm-variable,.cm-s-default .cm-punctuation,.cm-s-default .cm-property,.cm-s-default .cm-operator {}.cm-s-default .cm-variable-2 {color: #05a;}.cm-s-default .cm-variable-3 {color: #085;}.cm-s-default .cm-comment {color: #a50;}.cm-s-default .cm-string {color: #a11;}.cm-s-default .cm-string-2 {color: #f50;}.cm-s-default .cm-meta {color: #555;}.cm-s-default .cm-qualifier {color: #555;}.cm-s-default .cm-builtin {color: #30a;}.cm-s-default .cm-bracket {color: #997;}.cm-s-default .cm-tag {color: #170;}.cm-s-default .cm-attribute {color: #00c;}.cm-s-default .cm-hr {color: #999;}.cm-s-default .cm-link {color: #00c;}.cm-s-default .cm-error {color: #f00;}.cm-invalidchar {color: #f00;}.CodeMirror-composing { border-bottom: 2px solid; }div.CodeMirror span.CodeMirror-matchingbracket {color: #0f0;}div.CodeMirror span.CodeMirror-nonmatchingbracket {color: #f22;}.CodeMirror-matchingtag { background: rgba(255, 150, 0, .3); }.CodeMirror-activeline-background {background: #e8f2ff;}.CodeMirror {position: relative; background: #f5f5f5;}.CodeMirror-scroll {overflow: auto !important; margin-bottom: 0; margin-right: 0; padding: 10px 0 25px; outline: none; position: relative;}.CodeMirror-sizer {position: relative; border-right: 30px solid transparent;}.CodeMirror-vscrollbar, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-gutter-filler {position: absolute; z-index: 6; display: none;}.CodeMirror-vscrollbar {right: 0; top: 0; overflow-x: hidden; overflow-y: scroll;}.CodeMirror-hscrollbar {bottom: 0; left: 0 !important; overflow-y: hidden; overflow-x: scroll;}.CodeMirror-scrollbar-filler {right: 0; bottom: 0;}.CodeMirror-gutter-filler {left: 0; bottom: 0;}.CodeMirror-gutters {position: absolute; left: 0; top: 0; min-height: 100%; z-index: 3;}.CodeMirror-gutter {white-space: normal; height: inherit; display: inline-block; vertical-align: top; margin-bottom: -30px;}.CodeMirror-gutter-wrapper {position: absolute; z-index: 4; background: none !important; border: none !important;}.CodeMirror-gutter-background {position: absolute; top: 0; bottom: 0; z-index: 4;}.CodeMirror-gutter-elt {position: absolute; cursor: default; z-index: 4; text-align: center;}.CodeMirror-gutter-wrapper ::selection { background-color: transparent }.CodeMirror-gutter-wrapper ::-moz-selection { background-color: transparent }.CodeMirror-lines {cursor: text; min-height: 1px;}.CodeMirror pre {-moz-border-radius: 0; -webkit-border-radius: 0; border-radius: 0; border-width: 0; background: transparent; font-family: inherit; font-size: inherit; margin: 0; white-space: pre; word-wrap: normal; line-height: inherit; color: inherit; z-index: 2; position: relative; overflow: visible; -webkit-tap-highlight-color: transparent; -webkit-font-variant-ligatures: contextual; font-variant-ligatures: contextual;}.CodeMirror-wrap pre {word-wrap: break-word; white-space: pre-wrap; word-break: normal;}.CodeMirror-linebackground {position: absolute; left: 0; right: 0; top: 0; bottom: 0; z-index: 0;}.CodeMirror-linewidget {position: relative; z-index: 2; overflow: auto;}.CodeMirror-widget {}.CodeMirror-rtl pre { direction: rtl; }.CodeMirror-code {outline: none;}.CodeMirror-scroll,.CodeMirror-sizer,.CodeMirror-gutter,.CodeMirror-gutters,.CodeMirror-linenumber {-moz-box-sizing: content-box; box-sizing: content-box;}.CodeMirror-measure {position: absolute; width: 100%; height: 0; overflow: hidden; visibility: hidden;}.CodeMirror-cursor {position: absolute; pointer-events: none;}.CodeMirror-measure pre { position: static; }div.CodeMirror-cursors {visibility: hidden; position: relative; z-index: 3;}div.CodeMirror-dragcursors {visibility: visible;}.CodeMirror-focused div.CodeMirror-cursors {visibility: visible;}.CodeMirror-selected { background: #d9d9d9; }.CodeMirror-focused .CodeMirror-selected { background: #d7d4f0; }.CodeMirror-crosshair { cursor: crosshair; }.CodeMirror-line::selection, .CodeMirror-line > span::selection, .CodeMirror-line > span > span::selection { background: #d7d4f0; }.CodeMirror-line::-moz-selection, .CodeMirror-line > span::-moz-selection, .CodeMirror-line > span > span::-moz-selection { background: #d7d4f0; }.cm-searching {background: #ffa; background: rgba(255, 255, 0, .4);}.cm-force-border { padding-right: .1px; }@media print {  .CodeMirror div.CodeMirror-cursors {visibility: hidden;}}.cm-tab-wrap-hack:after { content: ""; }span.CodeMirror-selectedtext { background: none; }.CodeMirror-activeline-background, .CodeMirror-selected {transition: visibility 0ms 100ms;}.CodeMirror-blur .CodeMirror-activeline-background, .CodeMirror-blur .CodeMirror-selected {visibility:hidden;}.CodeMirror-blur .CodeMirror-matchingbracket {color:inherit !important;outline:none !important;text-decoration:none !important;}</style><style id="wiz_custom_css">html, body {font-size: 12pt;}body {font-family: Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;line-height: 1.6;margin: 0 auto;padding: 20px 16px;padding: 1.25rem 1rem;}h1, h2, h3, h4, h5, h6 {margin:20px 0 10px;margin:1.25rem 0 0.625rem;padding: 0;font-weight: bold;}h1 {font-size:20pt;font-size:1.67rem;}h2 {font-size:18pt;font-size:1.5rem;}h3 {font-size:15pt;font-size:1.25rem;}h4 {font-size:14pt;font-size:1.17rem;}h5 {font-size:12pt;font-size:1rem;}h6 {font-size:12pt;font-size:1rem;color: #777777;margin: 1rem 0;}div, p, ul, ol, dl, li {margin:0;}blockquote, table, pre, code {margin:8px 0;}ul, ol {padding-left:32px;padding-left:2rem;}ol.wiz-list-level1 > li {list-style-type:decimal;}ol.wiz-list-level2 > li {list-style-type:lower-latin;}ol.wiz-list-level3 > li {list-style-type:lower-roman;}blockquote {padding:0 12px;padding:0 0.75rem;}blockquote > :first-child {margin-top:0;}blockquote > :last-child {margin-bottom:0;}img {border:0;max-width:100%;height:auto !important;margin:2px 0;}table {border-collapse:collapse;border:1px solid #bbbbbb;}td, th {padding:4px 8px;border-collapse:collapse;border:1px solid #bbbbbb;min-height:28px;word-break:break-all;box-sizing: border-box;}.wiz-hide {display:none !important;}</style><style name="wiz_unsave_style">html, body {    font-size: 12pt;}body {    font-family: Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;    line-height: 1.6;    color: inherit;    background-color: inherit;    margin: 0 auto;    padding: 20px 16px;    padding: 1.25rem 1rem;}img{    max-width: 100%;}</style><style name="wiz_style_for_load"></style><script type="text/javascript" src="file:///C:\Tools\WizNote\WizTools\htmleditor\utils.js" wiz_style="unsave" charset="utf-8"></script><script type="text/javascript" src="file:///C:\Tools\WizNote\WizTools\htmleditor\localize.js" wiz_style="unsave" charset="utf-8"></script><script type="text/javascript" src="file:///C:\Tools\WizNote\WizTools\htmleditor\core\wizEditorForPc.js" wiz_style="unsave" charset="utf-8"></script><script type="text/javascript" src="file:///C:\Tools\WizNote\WizTools\htmleditor\editorHelper.js" wiz_style="unsave" charset="utf-8"></script><script type="text/javascript" src="file:///C:\Users\peak\Documents\My Knowledge\templates\WizTemplate.js" wiz_style="unsave" charset="utf-8"></script></head>

<body spellcheck="false" ><div><div id="header" style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;"><div id="blogTitle"><a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/schaepher/p/5561193.html" style="font-size: 1.67rem; font-weight: bold; line-height: 1.6; color: rgb(33, 117, 155); text-decoration: none;">Git和Github简单教程</a></div></div><div id="main" style="color:rgb(0, 0, 0);font-style:normal;font-weight:normal;"><div id="mainContent"><div class="forFlow"><div id="post_detail"><div id="topics"><div class="post"><div class="clear"></div><div class="postBody" style="color:rgb(0, 0, 0);"><div id="cnblogs_post_body" class="cnblogs-markdown"><p>原文链接：<a href="http://www.cnblogs.com/schaepher/p/5561193.html" style="color:rgb(61, 129, 238);text-decoration:none;">Git和Github简单教程</a></p><p><span style="color:rgb(128, 128, 128);font-style:normal;font-weight:normal;">来源：&nbsp;</span><a href="http://www.cnblogs.com/schaepher/p/5561193.html" style="font-style:normal;font-weight:normal;">http://www.cnblogs.com/schaepher/p/5561193.html</a><br></p><hr><p>网络上关于Git和GitHub的教程不少，但是这些教程有的命令太少不够用，有的命令太多，使得初期学习的时候需要额外花不少时间在一些当前用不到的命令上。<br>这篇文章主要的目标是用较少的时间学习Git和GitHub的基本使用。在足够一般使用的前提下，尽量减少命令。<br>如果需要其他命令，到时候再去其他地方了解就行了。</p><hr><p>目录：</p><ul><li><a href="http://www.cnblogs.com/schaepher/p/5561193.html#what" style="color:rgb(61, 129, 238);text-decoration:none;">零、Git是什么</a><br></li><li><a href="http://www.cnblogs.com/schaepher/p/5561193.html#function" style="color:rgb(61, 129, 238);text-decoration:none;">一、Git的主要功能：版本控制</a><br></li><li><a href="http://www.cnblogs.com/schaepher/p/5561193.html#overview" style="color:rgb(61, 129, 238);text-decoration:none;">二、概览</a><br></li><li><a href="http://www.cnblogs.com/schaepher/p/5561193.html#msysgit" style="color:rgb(61, 129, 238);text-decoration:none;">三、Git for Windows软件安装</a><br></li><li><a href="http://www.cnblogs.com/schaepher/p/5561193.html#local" style="color:rgb(61, 129, 238);text-decoration:none;">四、本地Git的使用</a></li><li><a href="http://www.cnblogs.com/schaepher/p/5561193.html#github" style="color:rgb(61, 129, 238);text-decoration:none;">五、Github与Git的关联</a></li><li><a href="http://www.cnblogs.com/schaepher/p/5561193.html#team" style="color:rgb(61, 129, 238);text-decoration:none;">六、团队合作开发</a></li><li><a href="http://www.cnblogs.com/schaepher/p/5561193.html#others" style="color:rgb(61, 129, 238);text-decoration:none;">七、Github的其他介绍</a></li><li><a href="http://www.cnblogs.com/schaepher/p/5561193.html#problem" style="color:rgb(61, 129, 238);text-decoration:none;">八、一些可能碰到的问题</a></li></ul><hr><p><a style="color:rgb(61, 129, 238);text-decoration:none;"></a></p><h2 id="零git是什么" style="font-weight:bold;color:rgb(0, 136, 145);">零、Git是什么</h2><p>我才不告诉你嘞</p><hr><p><a style="color:rgb(61, 129, 238);text-decoration:none;"></a></p><h2 id="一git的主要功能版本控制" style="font-weight:bold;color:rgb(0, 136, 145);">一、Git的主要功能：版本控制</h2><ol class="wiz-list-level1"><li>版本：<br>想想你平时用的软件，在软件升级之后，你用的就是新版本的软件。你应该见过这样的版本号：<code>v2.0</code>或者<span>&nbsp;</span><code>1511</code>（表示发布时为15年11月），如下图：<br><img src="index_files/0.7108631559956169.png"><br>那么如果你修改并保存了一个文件，从版本管理的角度来说，你得到的是这个文件的新版本。<br>可是很多情况下，这种修改是不可逆的。你修改完之后，无法回到你修改前的样子。为了避免这种情况，有的人会把新版本的内容保存到一个新的文件里面。<br>由于 Git 更多地用于代码管理，举个程序员的例子。比如以下是计算机专业学生的作业：<br><img src="index_files/0.7165807408487972.png" class=""><br>这样存储多个文件夹，可能会造成混乱。你可能想保存以前写的代码，因为它们可能在以后会用到。但是更多的时候是，你不知道各个文件夹都做了什么修改。<br>这时候你需要一款软件帮你管理版本，它就是Git。<br></li><li>控制：<br>你可以用Git来对这些不同的版本进行控制。还可以很方便地查看两个不同版本之间的不同之处。<br>——使用Git，你只保存最新的一份文件就可以了。<br>——那我以前的文件怎么办？<br>——可以用Git的 reset 帮你把文件回退到你想要的版本。<br>——如果回去了，那我的最新版本呢？<br>——还可以用 reflog 和 reset 的组合来还原。</li></ol><hr><p><a style="color:rgb(61, 129, 238);text-decoration:none;"></a></p><h2 id="二概览" style="font-weight:bold;color:rgb(0, 136, 145);">二、概览</h2><p>所有命令前都要加<span>&nbsp;</span><code>git</code>，如表中的<code>init</code>是指<span>&nbsp;</span><code>git init</code>。<br>点击命令可直接跳转至本文第一次使用的地方。<br>以下命令都在命令行里执行。</p><h3 id="个人本地使用" style="font-weight:bold;color:rgb(0, 83, 89);">1.个人本地使用</h3><div class="wiz-table-container" style="position: relative; padding: 15px 0px 5px;"><div class="wiz-table-body"><table><thead><tr class="header"><th align="left">行为</th><th align="left">命令</th><th align="left">备注</th></tr></thead><tbody><tr class="odd"><td align="left">初始化</td><td align="left"><a href="http://www.cnblogs.com/schaepher/p/5561193.html#init" style="color:rgb(61, 129, 238);text-decoration:none;">init</a></td><td align="left">在本地的当前目录里初始化git仓库</td></tr><tr class="even"><td align="left"><br></td><td align="left"><a href="http://www.cnblogs.com/schaepher/p/5561193.html#clone" style="color:rgb(61, 129, 238);text-decoration:none;">clone 地址</a></td><td align="left">从网络上某个地址拷贝仓库(repository)到本地</td></tr><tr class="odd"><td align="left">查看当前状态</td><td align="left"><a href="http://www.cnblogs.com/schaepher/p/5561193.html#status" style="color:rgb(61, 129, 238);text-decoration:none;">status</a></td><td align="left" class="">查看当前仓库的状态。碰到问题不知道怎么办的时候，可以通过看它给出的提示来解决问题</td></tr><tr class="even"><td align="left">查看不同</td><td align="left"><a href="http://www.cnblogs.com/schaepher/p/5561193.html#diff" style="color:rgb(61, 129, 238);text-decoration:none;">diff</a></td><td align="left">查看当前状态和最新的commit之间不同的地方</td></tr><tr class="odd"><td align="left"><br></td><td align="left">diff 版本号1 版本号2</td><td align="left" class="">查看两个指定的版本之间不同的地方。这里的版本号指的是commit的hash值</td></tr><tr class="even"><td align="left">添加文件</td><td align="left"><a href="http://www.cnblogs.com/schaepher/p/5561193.html#add" style="color:rgb(61, 129, 238);text-decoration:none;">add -A</a></td><td align="left">这算是相当通用的了。在commit之前要先add</td></tr><tr class="odd"><td align="left">撤回stage的东西</td><td align="left"><a href="http://www.cnblogs.com/schaepher/p/5561193.html#checkout" style="color:rgb(61, 129, 238);text-decoration:none;">checkout -- .</a></td><td align="left" class="">这里用小数点表示撤回所有修改，在<code>--</code>的前后都有空格</td></tr><tr class="even"><td align="left">提交</td><td align="left"><a href="http://www.cnblogs.com/schaepher/p/5561193.html#commit" style="color:rgb(61, 129, 238);text-decoration:none;">commit -m "提交信息"</a></td><td align="left" class="">提交信息最好能体现更改了什么</td></tr><tr class="odd"><td align="left">删除未tracked</td><td align="left"><a href="http://www.cnblogs.com/schaepher/p/5561193.html#clean" style="color:rgb(61, 129, 238);text-decoration:none;">clean -xf</a></td><td align="left" class="">删除当前目录下所有没有track过的文件。不管它是否是.gitignore文件里面指定的文件夹和文件</td></tr><tr class="even"><td align="left">查看提交记录</td><td align="left" class=""><a href="http://www.cnblogs.com/schaepher/p/5561193.html#log" style="color:rgb(61, 129, 238);text-decoration:none;">log</a></td><td align="left" class="">查看当前版本及之前的commit记录</td></tr><tr class="odd"><td align="left"><br></td><td align="left"><a href="http://www.cnblogs.com/schaepher/p/5561193.html#reflog" style="color:rgb(61, 129, 238);text-decoration:none;">reflog</a></td><td align="left">HEAD的变更记录</td></tr><tr class="even"><td align="left">版本回退</td><td align="left"><a href="http://www.cnblogs.com/schaepher/p/5561193.html#reset" style="color:rgb(61, 129, 238);text-decoration:none;">reset --hard 版本号</a></td><td align="left" class="">回退到指定版本号的版本，该版本之后的修改都被删除。同时也是通过这个命令回到最新版本。需要reflog配合</td></tr></tbody></table></div></div><h3 id="个人使用远程仓库" style="font-weight:bold;color:rgb(0, 83, 89);">2.个人使用远程仓库</h3><div class="wiz-table-container" style="position: relative; padding: 15px 0px 5px;"><div class="wiz-table-body"><table><thead><tr class="header"><th align="left">行为</th><th align="left">命令</th><th align="left">备注</th></tr></thead><tbody><tr class="odd"><td align="left">设置用户名</td><td align="left"><a href="http://www.cnblogs.com/schaepher/p/5561193.html#config_user" style="color:rgb(61, 129, 238);text-decoration:none;">config --global user.name "你的用户名"</a></td><td align="left"><br></td></tr><tr class="even"><td align="left">设置邮箱</td><td align="left"><a href="http://www.cnblogs.com/schaepher/p/5561193.html#config_email" style="color:rgb(61, 129, 238);text-decoration:none;">config --global user.email "你的邮箱"</a></td><td align="left" class=""><br></td></tr><tr class="odd"><td align="left">生成ssh key</td><td align="left"><a href="http://www.cnblogs.com/schaepher/p/5561193.html#ssh_key" style="color:rgb(61, 129, 238);text-decoration:none;">ssh-keygen -t rsa -C "你的邮箱"</a></td><td align="left" class="">这条命令前面不用加git</td></tr><tr class="even"><td align="left">添加远程仓库</td><td align="left"><a href="http://www.cnblogs.com/schaepher/p/5561193.html#remote_add" style="color:rgb(61, 129, 238);text-decoration:none;">remote add origin 你复制的地址</a></td><td align="left">设置origin</td></tr><tr class="odd"><td align="left">上传并指定默认</td><td align="left"><a href="http://www.cnblogs.com/schaepher/p/5561193.html#push_origin" style="color:rgb(61, 129, 238);text-decoration:none;">push -u origin master</a></td><td align="left">指定origin为默认主机，以后push默认上传到origin上</td></tr><tr class="even"><td align="left">提交到远程仓库</td><td align="left" class=""><a href="http://www.cnblogs.com/schaepher/p/5561193.html#push" style="color:rgb(61, 129, 238);text-decoration:none;">push</a></td><td align="left" class="">将当前分支增加的commit提交到远程仓库</td></tr><tr class="odd"><td align="left" class="">从远程仓库同步</td><td align="left">pull</td><td align="left" class="">在本地版本低于远程仓库版本的时候，获取远程仓库的commit</td></tr></tbody></table></div></div><p>可以用一张图直观地看出以上主要的命令对仓库的影响。<br><img src="index_files/0.5976571451681207.png" class=""><br>图片引用自：<a href="http://blog.podrezo.com/git-introduction-for-cvssvntfs-users/" style="color:rgb(61, 129, 238);text-decoration:none;">Git introduction for CVS/SVN/TFS users</a></p><p><img src="index_files/0.9425835108915483.png" class=""><br>图片引用自：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013745374151782eb658c5a5ca454eaa451661275886c6000" style="color:rgb(61, 129, 238);text-decoration:none;">工作区和暂存区 - 廖雪峰的官方网站</a><span>&nbsp;</span>（做了点修改）</p><p>对照查看两张图：</p><ul><li>workspace 即工作区，逻辑上是本地计算机，还没添加到repository的状态；<br></li><li>staging 即版本库中的stage，是暂存区。修改已经添加进repository，但还没有作为commit提交，类似于缓存；<br></li><li>Local repository 即版本库中master那个地方。到这一步才算是成功生成一个新版本；<br></li><li>Remote repository 则是远程仓库。用来将本地仓库上传到网络，可以用于备份、共享、合作。本文将使用Github作为远程仓库的例子。</li></ul><hr><p><a style="color:rgb(61, 129, 238);text-decoration:none;"></a></p><h2 id="三git-for-windows软件安装" style="font-weight:bold;color:rgb(0, 136, 145);">三、Git for Windows软件安装</h2><p><img src="index_files/0.8040601868751738.png"><br>Git for Windows（又msysgit）</p><ul><li><p>安装包可以到官方网站<sup><a href="https://git-for-windows.github.io/" style="color:rgb(61, 129, 238);text-decoration:none;"><code>[1]</code></a></sup>下载，或者在github<sup><a href="https://github.com/git-for-windows/git/releases" style="color:rgb(61, 129, 238);text-decoration:none;"><code>[2]</code></a></sup>下载。如果下载不下来，可以把链接复制下来用迅雷下载。如果用迅雷下载不放心，在下载完后去在github下载的那个地方查看SHA-256值，并和下载的文件对比，如果值一样就可以放心使用。</p></li><li><p>安装的时候一路点击<code>Next</code>就行了。</p></li><li>刚安装完打开后，窗口比较小。如果不太习惯，可以把它改大一些。<br></li></ul><ol class="wiz-list-level1"><li>首先移到窗口右下角边缘，出现箭头后把窗口拉大。</li><li>点击窗口顶部左边的图标 -&gt; Options... -&gt; Window -&gt; Current size -&gt; OK<br>这样以后打开窗口都会是调整后的大小。</li></ol><blockquote style="color:rgb(51, 51, 51);"><p>Git for Windows从2.8.0版本<sup><a href="https://github.com/git-for-windows/git/releases/tag/v2.8.0.windows.1" title="查看2.8.0版本的Release Note" style="color:rgb(61, 129, 238);text-decoration:none;"><code>[3]</code></a></sup>开始，默认添加环境变量，所以环境变量部分就不用再手动配置了。（这句可以无视）</p></blockquote><hr><p><a style="color:rgb(61, 129, 238);text-decoration:none;"></a></p><h2 id="四本地git的使用" style="font-weight:bold;color:rgb(0, 136, 145);">四、本地Git的使用</h2><blockquote style="color:rgb(51, 51, 51);"><p>这里先不引入Github，而是在本地计算机上的操作。</p></blockquote><p>打开命令行（cmd）或者在想要创建repository的地方右键鼠标并点击<span>&nbsp;</span><code>Git Bash Here</code><span>&nbsp;</span>打开窗口。</p><h3 id="新的仓库-初始化" style="font-weight:bold;color:rgb(0, 83, 89);">1.新的仓库-》初始化</h3><p>运行<span>&nbsp;</span><a style="color:rgb(61, 129, 238);text-decoration:none;"><code>git init</code></a><span>&nbsp;</span>来初始化仓库，如下图：<br><img src="index_files/0.39198628064367935.png"></p><p>它会创建一个隐藏的文件夹<span>&nbsp;</span><code>.git</code><span>&nbsp;</span>这里不去管它是用来干嘛的。关闭windows的<code>显示隐藏的项目</code>吧。</p><hr><h3 id="文件的添加和提交" style="font-weight:bold;color:rgb(0, 83, 89);">2.文件的添加和提交</h3><p>我在这个文件夹里面创建了一个<span>&nbsp;</span><code>today.txt</code><span>&nbsp;</span>的文件。并且不要脸地祝自己儿童节快乐：</p><p><img src="index_files/0.2929278510739157.png"></p><p>这时我使用<span>&nbsp;</span><a style="color:rgb(61, 129, 238);text-decoration:none;"><code>git status</code></a><span>&nbsp;</span>来查看有什么变化：</p><p><img src="index_files/0.1581140781681627.png" class=""></p><p>它告诉我有一个还未追踪的文件，并提示我可以使用<span>&nbsp;</span><code>git add &lt;file&gt;...</code><span>&nbsp;</span>把它加进去。</p><p>但是我并不打算把所有命令都介绍一遍，所以我选择使用上面概览时所提到的<span>&nbsp;</span><a style="color:rgb(61, 129, 238);text-decoration:none;"><code>git add -A</code></a><span>&nbsp;</span>命令。</p><p><img src="index_files/0.8731248057393801.png"></p><p>嗯，什么提示都没有。没关系，我们再次使用<span>&nbsp;</span><code>git status</code><span>&nbsp;</span>：</p><p><img src="index_files/0.7193962538497505.png"></p><p>状态变了！说明add成功。再看看它的提示<span>&nbsp;</span><code>Changes to be committed</code><span>&nbsp;</span>，也就是说现在可以执行commit了。下面一行则告诉你如何将文件从stage里移出，这里不管。<br>执行<span>&nbsp;</span><a style="color:rgb(61, 129, 238);text-decoration:none;"><code>git commit -m "提交信息"</code></a><span>&nbsp;</span>将文件提交到repository里。提交信息用英文的双引号括起来。</p><p><img src="index_files/0.6912545029334594.png"></p><p>这时运行<span>&nbsp;</span><a style="color:rgb(61, 129, 238);text-decoration:none;"><code>git log</code></a><span>&nbsp;</span>就可以看到提交的记录了：</p><p><img src="index_files/0.3110648683263355.png"></p><p>这样第一步就完成了。</p><blockquote style="color:rgb(51, 51, 51);"><p>也许你会奇怪：为什么要有一个add，直接commit不就行了？这是因为stage有很多用处，具体可以去查找相关资料。这里就算不了解问题也不大。</p></blockquote><h3 id="文件的修改" style="font-weight:bold;color:rgb(0, 83, 89);">3.文件的修改</h3><p>接着我修改文件内容。改成祝大家儿童节快乐好了 (～￣▽￣)～</p><p><img src="index_files/0.5918729766061925.png"></p><p>我们用<span>&nbsp;</span><code>git status</code><span>&nbsp;</span>看看有什么变化：</p><p><img src="index_files/0.36459622906523315.png"></p><p>这和之前的提示不一样了。之前是这个：</p><p><img src="index_files/0.1654194392324051.png"></p><p>比较一下就会看到，之前的是添加新文件，当时文件还没被追踪（untracked），而这次是更改已经追踪（tracked）的文件。</p><p>现在我们通过git看看文件做了哪些变化，执行<span>&nbsp;</span><a style="color:rgb(61, 129, 238);text-decoration:none;"><code>git diff</code></a><span>&nbsp;</span>：</p><p><img src="index_files/0.1465153447759353.png"></p><p>它默认跟最新的一个commit进行比较。<br>红色（前面有减号<code>-</code>）表示删除，绿色（前面有加号<code>+</code>）表示添加。<br>因此，在git看来，我们是删除了原来那一行，并添加了新的两行。这在文件内容特别多的时候效果比较明显。<br>这个命令在以下情况可以使用：</p><ul><li>你忘记改了什么，又想知道</li><li>别人发给你新版本，你想知道更改了什么</li></ul><p>注：如果你用 windows 创建 txt 文件，并用自带文本编辑器来编辑文本，得到的编码是 GBK 。而 Git 读取文件时，使用 UTF-8 无 ROM 编码。因此会出现中文无法正常显示的情况。</p><p>假如我现在想撤销这些更改，执行<span>&nbsp;</span><a style="color:rgb(61, 129, 238);text-decoration:none;"><code>git checkout -- .</code></a><span>&nbsp;</span>就行了：</p><p><img src="index_files/0.38129961131941403.png"></p><p>恩，仍然没有任何提示。执行<span>&nbsp;</span><code>git status</code><span>&nbsp;</span>看看：</p><p><img src="index_files/0.19204594498686633.png"></p><p>上一个status的提示已经不见咯。再来看看文件：</p><p><img src="index_files/0.7387029372076177.png"></p><p>果然复原了！那么再次进行修改：</p><p><img src="index_files/0.9559343292197371.png"></p><p>接着：<br><code>git add -A</code><br><code>git commit -m "将[自己]改为[米娜桑]"</code></p><p><img src="index_files/0.8406009744492633.png"></p><p>用<span>&nbsp;</span><code>git log</code><span>&nbsp;</span>看看提交（commit）记录：</p><p><img src="index_files/0.2514562812181862.png"></p><p>嗯。现在有两个提交了。</p><h3 id="版本回退" style="font-weight:bold;color:rgb(0, 83, 89);">4.版本回退！</h3><p>如果我写的是一篇很长的文章，并且在之前的版本基础上修改了一部分内容，生成一个新的commit，现在我发现我在修改的时候删掉了一部分内容，而这部分内容是我现在需要用到的，怎么办？版本回退！</p><p>还是以刚才的文件为例，现在我试着将文件回退到第一个commit时的状态。但在这之前，我们看看这个文件夹里面的东西：</p><p><img src="index_files/0.3967954986536195.png"></p><p><code>.git</code><span>&nbsp;</span>文件夹因为本来就是隐藏的，我在关了<span>&nbsp;</span><code>显示隐藏的项目</code><span>&nbsp;</span>的选项后，它就不显示了。<br>现在看到的是只有一个文件，而且是最新的一个版本。</p><blockquote style="color:rgb(51, 51, 51);"><p>文件的修改日期为<span>&nbsp;</span><code>2016\6\1 21:52</code></p></blockquote><p>从刚才的<span>&nbsp;</span><code>git log</code><span>&nbsp;</span>：</p><p><img src="index_files/0.21688113687918475.png"></p><p>我们看到两行黄色部分是以<span>&nbsp;</span><code>commit</code><span>&nbsp;</span>开头的，后面接着一串字符。这一串字符是16进制的数，是一串哈希值。我们叫它版本号就行了。</p><p>开始回退，执行<span>&nbsp;</span><a style="color:rgb(61, 129, 238);text-decoration:none;"><code>git reset --hard 1df0573</code></a><span>&nbsp;</span>（取版本号前7位就可以了）：</p><p><img src="index_files/0.49791362899255764.png"></p><p>这里提示HEAD已经更改指向至1df0573了。此时文件：</p><p><img src="index_files/0.4427028637812107.png" class=""></p><p>其内容：</p><p><img src="index_files/0.6918538365813038.png"></p><p>已经回到我的第一个版本的状态。</p><blockquote style="color:rgb(51, 51, 51);"><p>这里文件的修改日期被更改为我现在的时间<span>&nbsp;</span><code>2016\6\2 19:29</code><br>这是由于文件的修改日期是由windows修改的，因为它检测到这个文件被修改了。而我们刚才从最新版本回退到现在这个版本，就像是我们手动修改了文件内容一样，事实上是由git来完成的。<br>其实可以不管上面这一段</p></blockquote><p>现在再执行<span>&nbsp;</span><code>git log</code><span>&nbsp;</span>：</p><p><img src="index_files/0.9729401672726614.png"></p><p>新版本的commit记录不见了！这就是 reset --hard 的力量，很好很强硬！</p><p>现在已经看到了之前版本的内容，那么如何回到最新版呢？<br>先执行<span>&nbsp;</span><a style="color:rgb(61, 129, 238);text-decoration:none;"><code>git reflog</code></a><span>&nbsp;</span>：</p><p><img src="index_files/0.6635392570362042.png"></p><p>可以看到HEAD的变化情况。<br>第一行表示当前HEAD所在的版本号是<span>&nbsp;</span><code>1df0573</code><span>&nbsp;</span>，而之所以在这个版本号，是由于我们执行了reset命令。<br>看第二行，它告诉我们，这个HEAD所在的版本号是<span>&nbsp;</span><code>ad93b89</code><span>&nbsp;</span>，这个版本号是在执行commit之后形成的。</p><p>此时我再用一次reset，将HEAD指向<span>&nbsp;</span><code>ad93b89</code><span>&nbsp;</span>， 同时查看log ：</p><pre><code class="hljs sql" style="color:rgb(0, 0, 0);">git <span class="hljs-keyword" style="color:rgb(0, 0, 255);">reset</span> <span class="hljs-comment" style="color:green;">--hard ad93b89</span>
git <span class="hljs-keyword" style="color:rgb(0, 0, 255);">log</span></code></pre><p><img src="index_files/0.1472492236090861.png"></p><p>回到第一次reset前的状态了！</p><p><img src="index_files/0.00044921413649201547.png"></p><h3 id="清除未追踪的文件" style="font-weight:bold;color:rgb(0, 83, 89);">5.清除未追踪的文件</h3><p>通常在reset或者pull（后面会讲）之前要做两件事：</p><ul><li>将新添加且为追踪的文件删除掉（比如编译程序后所产生的文件）<br></li><li>已追踪的文件已有修改，但又不需要这些修改，则将它们还原</li></ul><p>还原已做修改的tracked文件，上面已经讲过。<br>现在看看如何用命令删除新加的文件。</p><p>首先我手动创建个文件，用来演示：</p><p><img src="index_files/0.8723104825480168.png"></p><p>用checkout是没办法删除掉它的，使用<span>&nbsp;</span><a style="color:rgb(61, 129, 238);text-decoration:none;"><code>git clean -xf</code></a><span>&nbsp;</span>：</p><p><img src="index_files/0.33545664913335793.png"></p><p>这个命令的杀伤力比较大，它删除当前目录下所有没有track过的文件。不管它是否是.gitignore文件里面指定的文件夹和文件。当然，也有杀伤力比较小的，但这里就不介绍了。</p><h3 id="关于git-status中文乱码问题" style="font-weight:bold;color:rgb(0, 83, 89);">6.关于git status中文乱码问题</h3><p>如果你的文件名是中文的，在使用<code>git status</code>时会乱码。如下图所示：</p><p><img src="index_files/0.13168874035495182.png"></p><p>如果要使它显示为中文，在命令行里执行：<code>git config --global core.quotepath false</code>。<br>再使用<span>&nbsp;</span><code>git status</code>：</p><p><img src="index_files/0.25246057966553903.png"></p><hr><p><a style="color:rgb(61, 129, 238);text-decoration:none;"></a></p><h2 id="五github与git的关联" style="font-weight:bold;color:rgb(0, 136, 145);">五、Github与Git的关联</h2><p>上面的操作都是在本地计算机上产生影响的，一般也够用了。<br>如果你是程序员，想和其他人分享你的代码，或者合作开发，可以用Github。</p><h3 id="本地git和github的连接" style="font-weight:bold;color:rgb(0, 83, 89);">1）本地Git和Github的连接</h3><ol class="wiz-list-level1"><li><p>到Github<sup><a href="https://github.com/join?source=header" style="color:rgb(61, 129, 238);text-decoration:none;"><code>[4]</code></a></sup>注册账号。</p></li><li>本地配置用户名和邮箱（如果已经设置好，跳过该步）：<ul><li><a style="color:rgb(61, 129, 238);text-decoration:none;"><code>git config --global user.name "你的用户名"</code></a><br><a style="color:rgb(61, 129, 238);text-decoration:none;"><code>git config --global user.email "你的邮箱"</code></a><br>如图所示：<br><img src="index_files/0.3900784676859135.png"><br></li><li>或者你直接在config文件里改，位置在<span>&nbsp;</span><code>C:\Users\你的用户名\.gitconfig</code><span>&nbsp;</span>。如下图所示，添加相应信息：<br><img src="index_files/0.01884865660429913.png"></li></ul></li><li>生成ssh key<br>运行<span>&nbsp;</span><a style="color:rgb(61, 129, 238);text-decoration:none;"><code>ssh-keygen -t rsa -C "你的邮箱"</code></a><span>&nbsp;</span>，它会有三次等待你输入，直接回车即可。<br><img src="index_files/0.23565690857364907.png"><br>将生成的ssh key复制到剪贴板，执行<span>&nbsp;</span><code>clip &lt; ~/.ssh/id_rsa.pub</code><span>&nbsp;</span>（或者到上图提示的路径里去打开文件并复制）：<br><img src="index_files/0.24436101288656698.png"><br></li><li><p>打开Github，进入Settings：<br><img src="index_files/0.576369330549785.png"><br>点击左边的<span>&nbsp;</span><code>SSH and GPG keys</code><span>&nbsp;</span>，将ssh key粘贴到右边的Key里面。Title随便命名即可。<br><img src="index_files/0.5708479167403542.png"><br>点击下面的<span>&nbsp;</span><code>Add SSH key</code><span>&nbsp;</span>就添加成功了。<br>测试一下吧，执行<span>&nbsp;</span><code>ssh -T git@github.com</code><span>&nbsp;</span>：<br><img src="index_files/0.6016527807856689.png"><br>嗯，这样就成功了！</p></li></ol><p>注：</p><ul><li>对于 oschina 的 “码云” ，执行<span>&nbsp;</span><code>ssh -T git@git.oschina.net</code><br></li><li>对于 coding 的 “码市” ，执行<span>&nbsp;</span><code>ssh -T git@git.coding.net</code></li></ul><h3 id="创建远程仓库并与本地关联" style="font-weight:bold;color:rgb(0, 83, 89);">2）创建远程仓库并与本地关联</h3><ol class="wiz-list-level1"><li><p>创建远程仓库<br>首先是在右上角点击进入创建界面：</p><p><img src="index_files/0.4079526687401953.png"></p><p>接着输入远程仓库名：</p><p><img src="index_files/0.5961233180048873.png"></p><p>点击<span>&nbsp;</span><code>Create repository</code><span>&nbsp;</span>就创建好了。其他选项可以暂时不管。</p></li><li><p>将远程仓库和本地仓库关联起来</p><p>先到Github上复制远程仓库的SSH地址：</p><p><img src="index_files/0.1625283686985013.png"></p><p>有两种方式可以关联，一种是SSH，一种是HTTPS。由于<strong>HTTPS比较慢</strong>，所以推荐使用SSH。<br>注意SSH的地址格式是这样开头的：<span>&nbsp;</span><code>git@github.com</code></p><p>运行<span>&nbsp;</span><a style="color:rgb(61, 129, 238);text-decoration:none;"><code>git remote add origin 你复制的地址</code></a><span>&nbsp;</span>：</p><p><img src="index_files/0.8843372452873188.png"></p><p>如果你在创建 repository 的时候，加入了 README.md 或者 LICENSE ，那么 github 会拒绝你的 push 。你需要先执行<span>&nbsp;</span><code>git pull origin master</code>。</p><p>执行<span>&nbsp;</span><a style="color:rgb(61, 129, 238);text-decoration:none;"><code>git push -u origin master</code></a><span>&nbsp;</span>将本地仓库上传至Github的仓库并进行关联：</p><p><img src="index_files/0.6157286308295282.png"></p></li></ol><p>关联已经完成！</p><p>以后想在commit后同步到Github上，只要直接执行<span>&nbsp;</span><a style="color:rgb(61, 129, 238);text-decoration:none;"><code>git push</code></a><span>&nbsp;</span>就行啦：</p><p><img src="index_files/0.2080957677625077.png"></p><p>可以在Github上看到修改：</p><p><img src="index_files/0.946189662730125.png"></p><hr><p><a style="color:rgb(61, 129, 238);text-decoration:none;"></a></p><h2 id="六团队合作开发" style="font-weight:bold;color:rgb(0, 136, 145);">六、团队合作开发</h2><p>关于团队合作开发，我在之前已经专门用一篇文章来说明了。<br>原文链接：<span>&nbsp;</span><a href="http://www.cnblogs.com/schaepher/p/4933873.html" style="color:rgb(61, 129, 238);text-decoration:none;">GitHub团队项目合作流程</a></p><p>上文的目录：</p><ul><li><a href="http://www.cnblogs.com/schaepher/p/4933873.html#first" style="color:rgb(61, 129, 238);text-decoration:none;">零、前期准备</a><br></li><li><a href="http://www.cnblogs.com/schaepher/p/4933873.html#second" style="color:rgb(61, 129, 238);text-decoration:none;">一、创建开发分支</a><br></li><li><a href="http://www.cnblogs.com/schaepher/p/4933873.html#third" style="color:rgb(61, 129, 238);text-decoration:none;">二、Fork项目到个人的仓库</a><br></li><li><a href="http://www.cnblogs.com/schaepher/p/4933873.html#four" style="color:rgb(61, 129, 238);text-decoration:none;">三、Clone项目到本地</a><br></li><li><a href="http://www.cnblogs.com/schaepher/p/4933873.html#five" style="color:rgb(61, 129, 238);text-decoration:none;">四、和团队项目保持同步</a></li><li><a href="http://www.cnblogs.com/schaepher/p/4933873.html#six" style="color:rgb(61, 129, 238);text-decoration:none;">五、push修改到自己的项目上</a></li><li><a href="http://www.cnblogs.com/schaepher/p/4933873.html#seven" style="color:rgb(61, 129, 238);text-decoration:none;">六、请求合并到团队项目上</a></li><li><a href="http://www.cnblogs.com/schaepher/p/4933873.html#eight" style="color:rgb(61, 129, 238);text-decoration:none;">七、团队项目负责人审核及同意合并请求</a></li></ul><p>其中<span>&nbsp;</span><code>零、一、七</code><span>&nbsp;</span>是由团队项目负责人来完成的。</p><hr><p><a style="color:rgb(61, 129, 238);text-decoration:none;"></a></p><h2 id="七github的其他介绍" style="font-weight:bold;color:rgb(0, 136, 145);">七、Github的其他介绍</h2><h3 id="获取其他人的远程仓库" style="font-weight:bold;color:rgb(0, 83, 89);">1）获取其他人的远程仓库</h3><p>看到别人的代码，想要获取到本地计算机慢慢研究或者修改，可以用Git将其下载下来。<br>以我和一位同学合作的仓库为例，链接：<a href="https://github.com/schaepher/blogsbackup" style="color:rgb(61, 129, 238);text-decoration:none;">schaepher/blogsbackup</a></p><blockquote style="color:rgb(51, 51, 51);"><p>这是我们用来备份博客园博客的一个小程序，主要用于助教备份学生的博客。</p></blockquote><ol class="wiz-list-level1"><li><p>复制别人远程仓库的SSH。方法和上面关联git一样，进入仓库页面后，就能找到SSH地址。</p><p><img src="index_files/0.8286452211656443.png"></p></li><li><p>执行<span>&nbsp;</span><a style="color:rgb(61, 129, 238);text-decoration:none;"><code>git clone 复制的SSH地址</code></a></p><p><img src="index_files/0.9411355689694385.png"></p><p>整个项目42M，花了点时间才clone下来。</p></li></ol><p>有一点要注意：这样直接clone别人的仓库后，不能push上自己的修改。</p><h3 id="另一种关联远程空仓库的方法" style="font-weight:bold;color:rgb(0, 83, 89);">2）另一种关联远程空仓库的方法</h3><p>在知道了clone之后，你就可以更简单的创建并关联一个空仓库了。</p><ol class="wiz-list-level1"><li>在Github上创建仓库，上面有提到，这里不多讲</li><li>复制刚才创建的仓库的SSH</li><li>clone到本地</li></ol><p>这样可以不用再做关联了。省去了上面的<span>&nbsp;</span><code>init</code><span>&nbsp;</span>和<span>&nbsp;</span><code>git remote add origin</code><span>&nbsp;</span>以及<span>&nbsp;</span><code>git push -u origin master</code><span>&nbsp;</span>。</p><h3 id="使用github的好处" style="font-weight:bold;color:rgb(0, 83, 89);">3）使用GitHub的好处</h3><ul><li>全球最大的同♂性交友网站（逃<br></li><li>（严肃脸）很多牛逼程序员和牛逼公司的开源项目都放在这上面，有丰富的资源可以学习</li><li>别人（如HR）可以通过你的Github大致了解你的水平。《<a href="http://mindhacks.cn/2011/11/04/how-to-interview-a-person-for-two-years/" style="color:rgb(61, 129, 238);text-decoration:none;">怎样花两年时间去面试一个人</a>》 这篇文章的后面部分讲到了Github</li></ul><hr><p><a style="color:rgb(61, 129, 238);text-decoration:none;"></a></p><h2 id="八一些可能碰到的问题" style="font-weight:bold;color:rgb(0, 136, 145);">八、一些可能碰到的问题</h2><p>这篇文章基本只介绍主线操作，而在操作过程中，可能有误操作或者其他问题。我把这些问题集中放在另一篇博客里面（这里列出目录）。这样这篇文章不会显得太长。</p><ul><li><font color="#3d81ee"><a href="http://www.cnblogs.com/schaepher/p/4970291.html#conflict">一、 解决merge时出现的冲突</a></font></li><li><a href="http://www.cnblogs.com/schaepher/p/4970291.html#back" style="color:rgb(61, 129, 238);text-decoration:none;">二、 回退一个merge</a></li><li><a href="http://www.cnblogs.com/schaepher/p/4970291.html#pick" style="color:rgb(61, 129, 238);text-decoration:none;">三、 获取某一commit的修改</a></li><li><a href="http://www.cnblogs.com/schaepher/p/4970291.html#push_force" style="color:rgb(61, 129, 238);text-decoration:none;">四、 将低版本push到Github（删掉高版本Commit）</a></li></ul></div><div id="blog_post_info_block"><div id="BlogPostCategory" style="color:rgb(102, 102, 102);"><br></div></div></div></div></div></div></div></div></div><div style="color:gray"><br></div><br></div></body></html>